import json
import numpy as np
import scipy.special as sp
from scipy.stats import binom
from scipy.interpolate import interp1d

def binomial(n, k):
    if not 0 <= k <= n:
        return 0
    b = 1
    for t in range(min(k, n-k)):
        b *= n
        b //= t+1
        n -= 1
    return b

# From simulations

delta=0.1

#n=20:1:40
print('Input the type of grid  ')# and size m (101 or 121)')
lat_type =input("square(s) or triangular(t) ")
k = input("Enter value of k (20 or 100)")
k = int(k)
#m = float(input('m '))
m = 31
if lat_type == 's':
	if k == 20:
	#Results of running prob_fwding_parallel.py on a grid with m=31 and delta = 0.1 with k=20 packets
		pkndelta_simu = [0.82,0.75,0.72,0.7,0.686,0.677,0.669,0.665,0.661,0.6552,0.6512,0.6462,0.6444,0.6402,0.638,0.636,0.6331,0.6303,0.6288,0.6277,0.6252] 
		tau_kndelta_simu = [15717.37, 14851.3, 14610.65, 14500.53, 14394.52, 14505.66, 14570.42, 14844.95, 14955.21, 14997.08, 14955.73, 15028.94, 15176.59, 15214.34, 15279.74, 15671.87, 15693.4, 15468.87, 15812.76, 16032.87, 15925.76]

	#Results of running prob_fwding_parallel.py on a grid with m=31 and delta = 0.05 with k=20 packets
		pkndelta_simu1 = [0.84,0.77,0.74,0.715,0.7,0.69,0.681,0.6745,0.669,0.664,0.66,0.657,0.653,0.6504,0.6462,0.6442,0.641,0.6389,0.6366,0.6354,0.6323]
		tau_kndelta_simu1 = [16091.93, 15363.67, 15243.82, 15118.68, 15129.23, 15340.25, 15316.56, 15396.07, 15688.35, 15804.2, 15892.32, 16171.32, 16344.16, 16496.62, 16466.7, 16664.77, 16756.28, 16882.41, 16911.89, 17343.1, 17408.83]

	if k == 100:
	#Results of running RGGprob.py on a grid with m=31 and delta = 0.1 with k=100 packets
		pkndelta_simu=[0.871000,0.821000,0.787000,0.770000,0.757000,0.748000,0.737000,0.731000,0.725000,0.720000,0.714000,0.710000,0.706000,0.702000,0.700000,0.698000,0.694000,0.692000,0.688000,0.687000,0.684000,0.682000,0.680000,0.678000,0.676000,0.675000,0.674000,0.672000,0.671000,0.669000,0.668000,0.667000,0.666000,0.665000,0.663000,0.662000,0.662000,0.660000,0.659000,0.658000,0.657000,0.656000,0.655000,0.654000,0.653000,0.652000,0.652,0.651,0.65,0.6495,0.648,0.647,0.6463,0.646,0.645,0.6445,0.644,0.6435,0.6425,0.6415,0.6412,0.6407,0.64,0.6395,0.6385,0.638,0.6373,0.6372,0.6365,0.636,0.6354,0.635,0.6343,0.634,0.6335,0.6328,0.6324,0.632,0.6314,0.6309,0.6303,0.6301,0.6298,0.6292,0.6287,0.6283,0.6277,0.6274,0.6271,0.6267,0.6261,0.6259,0.6254,0.6249,0.6247,0.6245,0.624,0.6235,0.6231,0.6229,0.6225]
		tau_kndelta_simu=[83627.280000,79351.620000,76451.840000,75249.900000,74260.440000,73828.080000,73013.700000,72717.180000,72560.280000,72431.380000,72198.240000,71777.480000,71793.440000,71722.300000,71685.520000,71793.320000,71780.060000,71872.140000,71670.420000,71804.580000,71850.280000,71700.200000,71745.500000,71646.140000,71911.260000,71962.300000,71986.280000,72175.940000,72010.800000,72130.2,72352.520000,72531.040000,72589.44,73042.500000,72578.080000,72662.0,73220.360000,73086.440000,72982.780000,73051.400000,73250.120000,73455.680000,73073.180000,73427.12,73099.24,73386,73744,73695,74150,73908,73975,73892,73956,74295,74141,74125,74458,74499,74574,74450,74944,74929,74938,75313,75048,75175,75224,75331,75685,75352,75454,75769,75645,75808,75752,75958,76088,76131,76227,76266,76375,76543,76643,76806,76646,76778,77005,77165,77049,77403,77352,77399,77368,77399,77662,77915,77493,77811,77904,78096,78537]

	#Results of running RGGprob.py on a grid with m=31 and delta = 0.1 with k=100 packets
		pkndelta_simu1=[0.899000000000000,0.843000000000000,0.805000000000000,0.788000000000000,0.773000000000000,0.764000000000000,0.753000000000000,0.745000000000000,0.739000000000000,0.733000000000000,0.729000000000000,0.726000000000000,0.719000000000000,0.716000000000000,0.711000000000000,0.709000000000000,0.706000000000000,0.703000000000000,0.700000000000000,0.698000000000000,0.696000000000000,0.693000000000000,0.690000000000000,0.689000000000000,0.687000000000000,0.685000000000000,0.684000000000000,0.681000000000000,0.681000000000000,0.679000000000000,0.678000000000000,0.676000000000000,0.674000000000000,0.674000000000000,0.672000000000000,0.671000000000000,0.669000000000000,0.668000000000000,0.667000000000000,0.667000000000000,0.665000000000000,0.664000000000000,0.664000000000000,0.663000000000000,0.661000000000000,0.661000000000000,0.660000000000000,0.659000000000000,0.657000000000000,0.656000000000000,0.656000000000000,0.655000000000000,0.655000000000000,0.654000000000000,0.653000000000000,0.652000000000000,0.651000000000000,0.651000000000000,0.650000000000000,0.650000000000000,0.649000000000000,0.648000000000000,0.648000000000000,0.647000000000000,0.647000000000000,0.645000000000000,0.645000000000000,0.645000000000000,0.644000000000000,0.643000000000000,0.643000000000000,0.642000000000000,0.642000000000000,0.642000000000000,0.641000000000000,0.640000000000000,0.640000000000000,0.639000000000000,0.639000000000000,0.638000000000000,0.638000000000000,0.637000000000000,0.637000000000000,0.636000000000000,0.636000000000000,0.636000000000000,0.635000000000000,0.635000000000000,0.634000000000000,0.634000000000000,0.633000000000000,0.633000000000000,0.633000000000000,0.633000000000000,0.632000000000000,0.632000000000000,0.631000000000000,0.631000000000000,0.630000000000000,0.630000000000000,0.629000000000000]
		tau_kndelta_simu1=[86382.7200000000,81587.4100000000,78468.3900000000,77320.1700000000,76332.3600000000,75890.8200000000,75224.1000000000,74868.1800000000,74668.9100000000,74409.0100000000,74461.6100000000,74729.6000000000,74165.6300000000,74203.4900000000,74147.1500000000,74157.4200000000,74301.4500000000,74368.7700000000,74262.4200000000,74548.4900000000,74817.4600000000,74581.2400000000,74536.9500000000,74693.0600000000,74840.4400000000,75004.1900000000,75227.7100000000,74874.9300000000,75140.5650000000,75406.2000000000,75685.1700000000,75644.4700000000,75615.3700000000,75793.0350000000,75970.7000000000,75925.8400000000,76021.1300000000,76175.2600000000,76311.5200000000,76495.5100000000,76679.5000000000,76599.7900000000,77077.5850000000,77555.3800000000,76985.8900000000,77336.7300000000,77687.5700000000,77886.2000000000,77479.6200000000,77830.3400000000,77818.0450000000,77805.7500000000,78025.1600000000,78244.5700000000,78348.1300000000,78506.8800000000,78405.1700000000,78512.0600000000,78618.9500000000,78762.6450000000,78906.3400000000,79255.9700000000,79545.9500000000,79835.9300000000,79663.7200000000,79491.5100000000,79643.5466666667,79795.5833333333,79947.6200000000,80208.2500000000,80270.8650000000,80333.4800000000,80445.9166666667,80558.3533333333,80670.7900000000,80887.6000000000,80990.8600000000,81094.1200000000,81121.9300000000,81149.7400000000,81272.0200000000,81394.3000000000,81408.7050000000,81423.1100000000,81725.0966666667,82027.0833333333,82329.0700000000,82535.0300000000,82740.9900000000,82615.9050000000,82490.8200000000,82608.1875000000,82725.5550000000,82842.9225000000,82960.2900000000,83187.3950000000,83414.5000000000,83342.3100000000,83270.1200000000,83363.9800000000,83457.8400000000]


if lat_type == 't':
#Results of running prob_fwding_parallel.py on a triangular grid with m=31 and delta = 0.1
	pkndelta_simu = [0.72,0.66,0.63,0.615,0.602,0.59,0.5835,0.5785,0.5735,0.5674,0.5634,0.5596,0.5562,0.5548,0.5518,0.5486,0.5458,0.5434,0.5414,0.5404,0.5387]
	tau_kndelta_simu = [13767.28, 13034.53, 12797.32, 12827.01, 12796.07, 12725.48, 12946.45, 13011.12, 13159.35, 13126.1, 13275.99, 13366.86, 13349.65, 13542.31, 13745.5, 13785.43, 13812.5, 13834.3, 14088.45, 14266.43, 14394.43]

#Results of running prob_fwding_parallel.py on a triangular grid with m=31 and delta = 0.05
	pkndelta_simu1 = [0.76,0.68,0.65,0.63,0.62,0.606,0.597,0.591,0.5845,0.5805,0.577,0.5724,0.5694,0.566,0.5622,0.5594,0.5576,0.5552,0.553,0.5496,0.5479]
	tau_kndelta_simu1 = [14585.1, 13554.56, 13430.86, 13341.87, 13632.07, 13514.09, 13643.96, 13800.97, 13976.97, 14204.11, 14325.39, 14441.08, 14737.82, 14866.61, 14837.34, 14926.73, 15238.91, 15348.77, 15456.62, 15482.77, 15603.12]

tau_kndelta_simu = [t/(m*m) for t in tau_kndelta_simu]
tau_kndelta_simu1 = [t/(m*m) for t in tau_kndelta_simu1]
#import from json file
with open("theta_thetaplus.json") as f:
	data = json.load(f)

# The lambda values in the file are from 1 to 4.99 in steps of 0.01
p = data["p"]
thetap = data["thetap"]
thetaplus = data["thetaplus"]

p_fine = np.arange(0.45,1,0.000001)
thetap_sq = [num**2 for num in thetap]
thetaplus_sq = [nump**2 for nump in thetaplus]
func = interp1d(p,thetaplus_sq)
thetaplus_sq_fine = func(p_fine)

index = 0
print(k)
pkndelta_ergodic = np.zeros(k+1)
n=k
while n<=2*k:
	minp_index = 0
	prob_cdf = np.zeros(len(p_fine))
	prob_sum = np.zeros(len(p_fine))
	print(n)
	for j in range(k):
		prob_sum = binomial(n,j)*thetaplus_sq_fine**j*(1-thetaplus_sq_fine)**(n-j)
		prob_cdf = prob_cdf+prob_sum
	#prob = lbda*(binom.cdf(k-1,n,theta_lbda_p**2))
	try:
		minp_index = min(np.where(prob_cdf<=delta)[0])
	except:
		minp_index = -1
	pkndelta_ergodic[index] = p_fine[minp_index]
	#print(minp_index) 
	index = index+1
	n=n+1
print(pkndelta_ergodic)
#prob_from_simu = np.array(pkndelta_simu)
#thetaplus_pfs = f(lbda*prob_from_simu)
#tau_kndelta_pfs = lbda*prob_from_simu*thetaplus_pfs**2*np.arange(k,k+len(prob_from_simu))
thetaplus_pkndelta = func(pkndelta_ergodic)
tau_kndelta_ergodic = thetaplus_pkndelta**2*np.arange(k,k+len(pkndelta_ergodic))*pkndelta_ergodic

#print(pkndelta_ergodic)
#print(tau_kndelta_ergodic)

dict={"m":m,"k":k,"pkndelta_simu":pkndelta_simu,"pkndelta_simu1":pkndelta_simu1,"pkndelta_ergodic":list(pkndelta_ergodic),"tau_kndelta_simu":tau_kndelta_simu,"tau_kndelta_simu1":tau_kndelta_simu1,"tau_kndelta_ergodic":list(tau_kndelta_ergodic)}
json = json.dumps(dict)
f= open("simu_results.json","w")
f.write(json)
f.close()

