import matplotlib.pyplot as plt
import json
import numpy as np
import scipy.special as sp
from scipy.stats import binom
from scipy.interpolate import interp1d

def binomial(n, k):
    if not 0 <= k <= n:
        return 0
    b = 1
    for t in range(min(k, n-k)):
        b *= n
        b //= t+1
        n -= 1
    return b

#import from json file
with open("theta_thetaplus.json") as f:
	data = json.load(f)

p = data["p"]
thetap = data["thetap"]
thetaplus = data["thetaplus"]

p_fine = np.arange(0.45,1,0.00001)
thetap_sq = [num**2 for num in thetap]
thetaplus_sq = [nump**2 for nump in thetaplus]
func = interp1d(p,thetaplus_sq)
thetaplus_sq_fine = func(p_fine)


p_9150fine=[0.871000,0.821000,0.787000,0.770000,0.757000,0.748000,0.737000,0.731000,0.725000,0.720000,0.714000,0.710000,0.706000,0.702000,0.700000,0.698000,0.694000,0.692000,0.688000,0.687000,0.684000,0.682000,0.680000,0.678000,0.676000,0.675000,0.674000,0.672000,0.671000,0.669000,0.668000,0.667000,0.666000,0.665000,0.663000,0.662000,0.662000,0.660000,0.659000,0.658000,0.657000,0.656000,0.655000,0.654000,0.653000,0.652000,0.652,0.651,0.65,0.6495,0.648,0.647,0.6463,0.646,0.645,0.6445,0.644,0.6435,0.6425,0.6415,0.6412,0.6407,0.64,0.6395,0.6385,0.638,0.6373,0.6372,0.6365,0.636,0.6354,0.635,0.6343,0.634,0.6335,0.6328,0.6324,0.632,0.6314,0.6309,0.6303,0.6301,0.6298,0.6292,0.6287,0.6283,0.6277,0.6274,0.6271,0.6267,0.6261,0.6259,0.6254,0.6249,0.6247,0.6245,0.624,0.6235,0.6231,0.6229,0.6225]
trans_9150fine=[83627.280000,79351.620000,76451.840000,75249.900000,74260.440000,73828.080000,73013.700000,72717.180000,72560.280000,72431.380000,72198.240000,71777.480000,71793.440000,71722.300000,71685.520000,71793.320000,71780.060000,71872.140000,71670.420000,71804.580000,71850.280000,71700.200000,71745.500000,71646.140000,71911.260000,71962.300000,71986.280000,72175.940000,72010.800000,72130.2,72352.520000,72531.040000,72589.44,73042.500000,72578.080000,72662.0,73220.360000,73086.440000,72982.780000,73051.400000,73250.120000,73455.680000,73073.180000,73427.12,73099.24,73386,73744,73695,74150,73908,73975,73892,73956,74295,74141,74125,74458,74499,74574,74450,74944,74929,74938,75313,75048,75175,75224,75331,75685,75352,75454,75769,75645,75808,75752,75958,76088,76131,76227,76266,76375,76543,76643,76806,76646,76778,77005,77165,77049,77403,77352,77399,77368,77399,77662,77915,77493,77811,77904,78096,78537]
trans_9150fine = [i/(31*31) for i in trans_9150fine]

p_501fine=[0.850000000000000,0.800000000000000,0.760000000000000,0.740000000000000,0.720000000000000,0.710000000000000,0.700000000000000,0.690000000000000,0.690000000000000,0.680000000000000,0.680000000000000,0.676100000000000,0.672200000000000,0.668300000000000,0.664400000000000,0.660500000000000,0.656600000000000,0.652700000000000,0.648800000000000,0.644900000000000,0.641000000000000,0.639000000000000,0.637000000000000,0.634000000000000,0.634000000000000,0.632000000000000,0.631500000000000,0.629000000000001,0.628500000000001,0.627000000000001,0.627000000000001,0.627000000000000,0.624000000000000,0.624000000000000,0.623000000000000,0.623000000000000,0.621000000000000,0.621000000000000,0.620000000000000,0.620000000000000,0.619000000000000,0.618500000000000,0.618000000000000,0.617500000000000,0.617000000000000,0.616500000000000,0.616000000000000,0.615500000000000,0.615000000000000,0.614500000000000,0.614000000000000,0.613700000000000,0.613400000000000,0.613100000000000,0.612800000000000,0.612500000000000,0.612200000000000,0.611900000000000,0.611600000000000,0.611300000000000,0.611000000000000,0.610600000000001,0.610200000000001,0.609800000000001,0.609800000000001,0.609800000000001,0.609000000000001,0.609000000000001,0.609000000000001,0.608600000000001,0.608200000000001,0.608080000000001,0.607960000000001,0.607840000000001,0.607720000000001,0.607600000000001,0.607480000000000,0.607360000000000,0.607240000000000,0.607120000000000,0.607000000000000,0.606850000000000,0.606700000000000,0.606550000000000,0.606400000000000,0.606250000000001,0.606100000000001,0.605950000000001,0.605800000000001,0.605650000000001,0.605500000000001,0.605400000000001,0.605300000000001,0.605200000000001,0.605100000000001,0.605000000000001,0.604900000000001,0.604800000000001,0.604700000000001,0.604600000000001,0.604500000000001]
trans_501fine=[21321625.1800000,20180320.7200000,19251915.4600000,18861113.6400000,18381939.5000000,18168111.1400000,17987861.7000000,17781507.6600000,17734175.8800000,17656844.1000000,17660000,17609817.5400000,17559635.0800000,17429452.6200000,17369270.1600000,17249087.7000000,17158905.2400000,17088722.7800000,16988540.3200000,16888357.8600000,16788175.4000000,16731572.2000000,16887302.9000000,16768057.8000000,16779414.9000000,16790772,16799776.9600000,16717147.7900000,16766137.5600000,16663410.4400000,16777568.6600000,16715412.6100000,16653256.5600000,16730871.9700000,16808487.3800000,16809855.5700000,16811223.7600000,16803577.6300000,16795931.5000000,16893985.2700000,16992039.0400000,16993011.8370000,16993984.6340000,16994957.4310000,16995930.2280000,16996903.0250000,16997875.8220000,16998848.6190000,16999821.4160000,17000794.2130000,17001767.0100000,17022631.7100000,17043496.4100000,17064361.1100000,17085225.8100000,17106090.5100000,17126955.2100000,17147819.9100000,17168684.6100000,17189549.3100000,17210414.0100000,17172835.6050000,17135257.2000000,17436648.6000000,17382970.7000000,17329292.8000000,17275614.9000000,17333663.7333333,17391712.5666667,17449761.4000000,17400713.4000000,17441050.8150000,17481388.2300000,17521725.6450000,17562063.0600000,17602400.4750000,17642737.8900000,17683075.3050000,17723412.7200000,17763750.1350000,17804087.5500000,17838902.1350000,17873716.7200000,17908531.3050000,17943345.8900000,17978160.4750000,18012975.0600000,18047789.6450000,18082604.2300000,18117418.8150000,18152233.4000000,18180371.4250000,18208509.4500000,18236647.4750000,18264785.5000000,18292923.5250000,18321061.5500000,18349199.5750000,18377337.6000000,18405475.6250000,18433613.6500000]
trans_501fine = [i/(501*501) for i in trans_501fine]

k = 100
index = 0
delta = 0.1
print(k)
#pkndelta_ergodic = np.zeros(4*k+1)
pkndelta_ergodic = np.zeros(k+1)
n=k
#while n<=5*k:
while n<=2*k:
	minp_index = 0
	prob_cdf = np.zeros(len(p_fine))
	prob_sum = np.zeros(len(p_fine))
	print(n)
	for j in range(k):
		prob_sum = binomial(n,j)*thetaplus_sq_fine**j*(1-thetaplus_sq_fine)**(n-j)
		prob_cdf = prob_cdf+prob_sum
	#prob = binom.cdf(k-1,n,thetaplus_sq_fine)
	try:
		minp_index = min(np.where(prob_cdf<=delta)[0])
	except:
		minp_index = -1
	pkndelta_ergodic[index] = p_fine[minp_index]
	#print(minp_index) 
	index = index+1
	n=n+1
print(pkndelta_ergodic)
#prob_from_simu = np.array(pkndelta_simu)
#thetaplus_pfs = f(lbda*prob_from_simu)
#tau_kndelta_pfs = lbda*prob_from_simu*thetaplus_pfs**2*np.arange(k,k+len(prob_from_simu))
#thetaplus_sq_pkndelta = func(pkndelta_ergodic)
#tau_kndelta_ergodic = thetaplus_sq_pkndelta*np.arange(k,k+len(pkndelta_ergodic))*pkndelta_ergodic

thetaplus_sq_pfs = func(p_501fine)
tau_kndelta_pfs = thetaplus_sq_pfs*np.arange(k,k+len(p_501fine))*p_501fine

#This is the value of pkndelta_ergodic obtained as the minimum p such that the double summation is at least 1-delta obtained from the above code snippet
#pkndelta_ergodic = np.array([0.849947 0.788595 0.760061 0.736566 0.720692 0.703674 0.694077 0.690055 0.68277  0.677387 0.672309 0.667306 0.663155 0.659385 0.656247 0.652935 0.650316 0.647788 0.645306 0.643189 0.641596 0.639429 0.637485 0.635822 0.63444  0.633158 0.631508 0.628381 0.627128 0.626114 0.624816 0.623777 0.622823 0.621919 0.62095  0.620366 0.619602 0.6187   0.618025 0.617464 0.616892 0.616208 0.615569 0.614958 0.614403 0.613839 0.613241 0.612782 0.612419 0.61206  0.611556 0.611028 0.61053  0.61004  0.609719 0.609415 0.609115 0.608859 0.60863  0.608405 0.608181 0.607938 0.607597 0.607259 0.606959 0.606778 0.606599 0.606422 0.606247 0.606073 0.605702 0.605189 0.60489  0.604715 0.604543 0.604372 0.604203 0.604036 0.60389  0.60375 0.603611 0.603475 0.603339 0.603205 0.603072 0.602948 0.602834 0.602721 0.602609 0.602498 0.602389 0.60228  0.602173 0.602066 0.601962 0.601858 0.601756 0.601655 0.601555 0.601456 0.601358])
#theta_pkndelta_1001 = np.array([0.854998360840000,0.789933601340000,0.754368732000000,0.730417404800000,0.712665829400000,0.697456906560000,0.685451827600000,0.674137020400000,0.665445466760000,0.657477686960000,0.649926557150000,0.643121115480000,0.636789427750000,0.630761245200000,0.625303716120000,0.619980375170000,0.615289043650000,0.610588870000000,0.606147698000000,0.601828810000000,0.598114642000000,0.594018962040000,0.590058416960000,0.586366405190000,0.583092287200000,0.579838102390000,0.576538627740000,0.573292016240000,0.572952335280000,0.570252521600000,0.567805180090000,0.565338912430000,0.563654258320000,0.559965257600000,0.558053155360000,0.555817615200000,0.553604012960000,0.551870327840000,0.549646916180000,0.547274036400000,0.544724276800000,0.543266766760000,0.541819843960000,0.539192188960000,0.536726067410000,0.535374840170000,0.534033849500000,0.532315138960000,0.530559897640000,0.528087172190000,0.525838579150000,0.524350056340000,0.522876020370000,0.521385708400000,0.519900605350000,0.518431471150000,0.516793187080000,0.514721708900000,0.513098343100000,0.512043438700000,0.510996526000000,0.509961600850000,0.508979439250000,0.508038515000000,0.507109279250000,0.506180043500000,0.505262496250000,0.504350793250000,0.503127564400000,0.501149120500000,0.499185331740000,0.497236198120000,0.495765252640000,0.494658564200000,0.493561891040000,0.492475233160000,0.491393582920000,0.490294637860000,0.489202180900000,0.488109723940000,0.487034336620000,0.485967484120000,0.484909166440000,0.483850848760001,0.482830242160000,0.482421932500000,0.482020371760000,0.481618811020000,0.481223999200000,0.480829187380000,0.480437750020000,0.480046312660000,0.479661624220000,0.478707190640000,0.477199579080000,0.475700251100000,0.474209206700001,0.472726445880000,0.471260252220000,0.470710731730000,0.470216377000000])
#thetasq_p_new_ergodic = func(p_new_ergodic)
#trans_pkndelta_ergodic_501 = n*thetasq_p_new_ergodic/p_new_ergodic

#n1 = np.array(range(100,501))
n1 = np.array(range(100,201))
fig1,ax1 = plt.subplots(1,1)
fig1.set_size_inches(5, 2.5)
ax1.plot(n1,p_9150fine,'o-', label='Simulations on $\Gamma_{31}$')
ax1.plot(n1,p_501fine,'+--', label='Simulations on $\Gamma_{501}$')
ax1.plot(n1,pkndelta_ergodic,'-', label=r'from expression in ()')
#ax1.plot(n1,pkndelta_ergodic)
#ax1.set_title('Minimum forwarding probability')
plt.xlabel('Number of coded packets (n)')
plt.ylabel(r'$p_{\ k,n,\delta}$')
plt.tight_layout()
ax1.legend()

fig2,ax2 = plt.subplots(1,1)
fig2.set_size_inches(5, 2.5)
ax2.plot(n1,trans_9150fine,'o-', label='Simulations on $\Gamma_{31}$')
ax2.plot(n1,trans_501fine,'+--', label='Simulations on $\Gamma_{501}$')
#ax2.plot(n1,tau_kndelta_ergodic,'-', label=r'from expression in ()')
ax2.plot(n1,tau_kndelta_pfs,'-', label='Using $p_{k,n,\delta}$ from simulations')
#ax2.plot(n1,tau_kndelta_ergodic)
#ax2.set_title('Expected number of transmissions')
plt.xlabel('Number of coded packets (n)')
plt.ylabel(r'$\tau_{\ k,n,\delta}\ / \ m^2$')
plt.tight_layout()
ax2.legend()
plt.show()
